---
import Layout from "@layouts/LayoutStory.astro";
import { turso } from "@src/turso";
import { getRelatedStoriesBySlug, getRatingStoryBySlug, getStoryBySlug } from "@src/turso";
import { type Node, type Story } from "@types";
import { generalCategories } from "@src/data/categories";
export const prerender = false;

const { slug, node: nodeParam } = Astro.params;
const parentSlug = slug as string;

if (!nodeParam) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}

const nodeResponse = await turso.execute({
  sql: "SELECT * FROM nodes WHERE slug = ? AND parent_slug = ?;",
  args: [nodeParam as string, parentSlug],
});

if (!nodeResponse.rows.length) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}
const nodeData = nodeResponse.rows[0] as any;
if (!nodeData) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}

const node = {
  id: nodeData.id,
  slug: nodeData.slug,
  text: nodeData.text,
  options: JSON.parse(nodeData.options),
  title: nodeData.title,
  description: nodeData.description,
  parentSlug: nodeData.parent_slug,
  backSlug: nodeData.back_slug,
  storyId: nodeData.story_id,
} as Node;

const storyResponse = await getStoryBySlug(parentSlug);
const storyData = storyResponse[0] as any;

const story = {
  id: storyData.id,
  slug: storyData.slug,
  text: storyData.text,
  options: JSON.parse(storyData.options),
  title: storyData.title,
  description: storyData.description,
  rating: storyData.rating,
  ratingCount: storyData.rating_count,
  categories: storyData.categories,
  created: storyData.created_at,
} as unknown as Story;

const date = new Date(storyData.created_at).toISOString().split('T')[0];

const parsedCategory = JSON.parse(story.categories)[0];
const matchedCategory = generalCategories.find((cat) => cat.name === parsedCategory) || generalCategories[0];
const category = {
  title: matchedCategory.title,
  slug: matchedCategory.slug,
};

const backUrl =
  node.backSlug === node.parentSlug
    ? `/${node.parentSlug}`
    : `/${node.parentSlug}/${node.backSlug}`;
  
const relatedStories = await getRelatedStoriesBySlug(node.parentSlug);
const { rating, ratingCount } = await getRatingStoryBySlug(node.parentSlug);

const title = node.title || node.slug.replaceAll('-', ' ');
const description = node.description || story.description;
---

<Layout category={category} title={title} description={description} slug={node.parentSlug} options={node.options} optionSlug={node.parentSlug} backUrl={backUrl} relatedStories={relatedStories} ratingSlug={node.parentSlug} rating={rating as number} ratingCount={ratingCount as number} created={date}>
  <div set:html={node.text} />
</Layout>
